// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3bd8476aDecodeAnalyticModel(in *jlexer.Lexer, out *ReportOut) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "landing_name":
			out.Landing = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "report_data":
			out.Data = string(in.String())
		case "created_at":
			out.Time = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd8476aEncodeAnalyticModel(out *jwriter.Writer, in ReportOut) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"landing_name\":"
		out.RawString(prefix)
		out.String(string(in.Landing))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"report_data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReportOut) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd8476aEncodeAnalyticModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReportOut) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd8476aEncodeAnalyticModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReportOut) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd8476aDecodeAnalyticModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReportOut) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd8476aDecodeAnalyticModel(l, v)
}
func easyjson3bd8476aDecodeAnalyticModel1(in *jlexer.Lexer, out *ReportHeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "landing":
			out.Landing = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd8476aEncodeAnalyticModel1(out *jwriter.Writer, in ReportHeader) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"landing\":"
		out.RawString(prefix[1:])
		out.String(string(in.Landing))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReportHeader) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd8476aEncodeAnalyticModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReportHeader) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd8476aEncodeAnalyticModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReportHeader) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd8476aDecodeAnalyticModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReportHeader) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd8476aDecodeAnalyticModel1(l, v)
}
func easyjson3bd8476aDecodeAnalyticModel2(in *jlexer.Lexer, out *ReportBK) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "header":
			(out.Header).UnmarshalEasyJSON(in)
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				in.Delim('[')
				if out.Result == nil {
					if !in.IsDelim(']') {
						out.Result = make([]OptionBK, 0, 2)
					} else {
						out.Result = []OptionBK{}
					}
				} else {
					out.Result = (out.Result)[:0]
				}
				for !in.IsDelim(']') {
					var v1 OptionBK
					(v1).UnmarshalEasyJSON(in)
					out.Result = append(out.Result, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd8476aEncodeAnalyticModel2(out *jwriter.Writer, in ReportBK) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"header\":"
		out.RawString(prefix[1:])
		(in.Header).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		if in.Result == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Result {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReportBK) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd8476aEncodeAnalyticModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReportBK) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd8476aEncodeAnalyticModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReportBK) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd8476aDecodeAnalyticModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReportBK) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd8476aDecodeAnalyticModel2(l, v)
}
func easyjson3bd8476aDecodeAnalyticModel3(in *jlexer.Lexer, out *OptionBK) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd8476aEncodeAnalyticModel3(out *jwriter.Writer, in OptionBK) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OptionBK) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd8476aEncodeAnalyticModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OptionBK) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd8476aEncodeAnalyticModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OptionBK) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd8476aDecodeAnalyticModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OptionBK) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd8476aDecodeAnalyticModel3(l, v)
}
func easyjson3bd8476aDecodeAnalyticModel4(in *jlexer.Lexer, out *LandingsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "landings":
			if in.IsNull() {
				in.Skip()
				out.Landings = nil
			} else {
				in.Delim('[')
				if out.Landings == nil {
					if !in.IsDelim(']') {
						out.Landings = make([]Landing, 0, 2)
					} else {
						out.Landings = []Landing{}
					}
				} else {
					out.Landings = (out.Landings)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Landing
					(v4).UnmarshalEasyJSON(in)
					out.Landings = append(out.Landings, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd8476aEncodeAnalyticModel4(out *jwriter.Writer, in LandingsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"landings\":"
		out.RawString(prefix[1:])
		if in.Landings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Landings {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LandingsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd8476aEncodeAnalyticModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LandingsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd8476aEncodeAnalyticModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LandingsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd8476aDecodeAnalyticModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LandingsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd8476aDecodeAnalyticModel4(l, v)
}
func easyjson3bd8476aDecodeAnalyticModel5(in *jlexer.Lexer, out *Landing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd8476aEncodeAnalyticModel5(out *jwriter.Writer, in Landing) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Landing) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd8476aEncodeAnalyticModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Landing) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd8476aEncodeAnalyticModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Landing) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd8476aDecodeAnalyticModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Landing) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd8476aDecodeAnalyticModel5(l, v)
}
func easyjson3bd8476aDecodeAnalyticModel6(in *jlexer.Lexer, out *FormData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fromTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartTime).UnmarshalJSON(data))
			}
		case "toTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndTime).UnmarshalJSON(data))
			}
		case "landingFilter":
			out.Landing = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd8476aEncodeAnalyticModel6(out *jwriter.Writer, in FormData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fromTime\":"
		out.RawString(prefix[1:])
		out.Raw((in.StartTime).MarshalJSON())
	}
	{
		const prefix string = ",\"toTime\":"
		out.RawString(prefix)
		out.Raw((in.EndTime).MarshalJSON())
	}
	{
		const prefix string = ",\"landingFilter\":"
		out.RawString(prefix)
		out.String(string(in.Landing))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FormData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd8476aEncodeAnalyticModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FormData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd8476aEncodeAnalyticModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FormData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd8476aDecodeAnalyticModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FormData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd8476aDecodeAnalyticModel6(l, v)
}
